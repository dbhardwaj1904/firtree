/* ------------------------------------------------------------------------ */
/*                                                                          */
/* [firtree.abs]               Abstract Grammar                             */
/*                                                                          */
/* ------------------------------------------------------------------------ */

LANGUAGE firtree

TOKENS

  Identifier, IntConst, FloatConst, BoolConst

TYPES

  firtree                                 = Start_TranslationUnit(ExternalDeclaration*)

  ExternalDeclaration                     = definefuntion(FunctionDefinition);
                                            declarefunction(FunctionPrototype)

  FunctionPrototype                       = functionprototype(FunctionHeader, ParameterDeclaration*)

  FunctionHeader                          = functionheader(FunctionQualifier, FullySpecifiedType, Identifier)

  FunctionQualifier                       = function;
                                            kernel

  FullySpecifiedType                      = unqualifiedtype(TypeSpecifier);
                                            qualifiedtype(OptionalTypeQualifier, TypeSpecifier)

  TypeSpecifier                           = vec3;
                                            void;
                                            bool;
                                            sampler;
                                            vec2;
                                            float;
                                            color;
                                            vec4;
                                            int

  ParameterDeclaration                    = parameterdeclaration(OptionalTypeQualifier, OptionalParameterQualifier, TypeSpecifier, OptionalParameterIdentifier)

  OptionalTypeQualifier                   = const;
                                            notypequalifier

  OptionalParameterQualifier              = noparameterqualifier;
                                            in;
                                            out;
                                            inout

  OptionalParameterIdentifier             = unnamedparameter;
                                            parametername(Identifier)

  FunctionDefinition                      = functiondefinition(FunctionPrototype, CompoundStatementNoScope)

  StatementNoScope                        = noscope(AdditiveExpr)

  CompoundStatementNoScope                = noscope(AdditiveExpr*)

  SingleDeclaration                       = veariableinitializer(Identifier, AdditiveExpr)

  AdditiveExpr                            = logicaland(AdditiveExpr, AdditiveExpr);
                                            expression(AdditiveExpr, AdditiveExpr*);
                                            newsymbol(FullySpecifiedType, Identifier, AdditiveExpr);
                                            greaterequal(AdditiveExpr, AdditiveExpr);
                                            inc(AdditiveExpr);
                                            bool(BoolConst);
                                            add(AdditiveExpr, AdditiveExpr);
                                            int(IntConst);
                                            sub(AdditiveExpr, AdditiveExpr);
                                            lessequal(AdditiveExpr, AdditiveExpr);
                                            mulassign(AdditiveExpr, AdditiveExpr);
                                            addassign(AdditiveExpr, AdditiveExpr);
                                            noinitializer;
                                            initdeclaratorlist(FullySpecifiedType, SingleDeclaration, SingleDeclaration*);
                                            postdec(AdditiveExpr);
                                            greater(AdditiveExpr, AdditiveExpr);
                                            compoundstatement(AdditiveExpr*);
                                            fieldselect(AdditiveExpr, Identifier);
                                            variablenamed(Identifier);
                                            ternary(AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            subassign(AdditiveExpr, AdditiveExpr);
                                            for(AdditiveExpr, AdditiveExpr, AdditiveExpr, StatementNoScope);
                                            logicalor(AdditiveExpr, AdditiveExpr);
                                            divassign(AdditiveExpr, AdditiveExpr);
                                            while(AdditiveExpr, StatementNoScope);
                                            assign(AdditiveExpr, AdditiveExpr);
                                            selection(AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            do(AdditiveExpr, AdditiveExpr);
                                            nop;
                                            postinc(AdditiveExpr);
                                            return(AdditiveExpr);
                                            functioncall(FunctionSpecifier, AdditiveExpr*);
                                            dec(AdditiveExpr);
                                            logicalxor(AdditiveExpr, AdditiveExpr);
                                            float(FloatConst);
                                            negate(AdditiveExpr);
                                            notequal(AdditiveExpr, AdditiveExpr);
                                            less(AdditiveExpr, AdditiveExpr);
                                            equal(AdditiveExpr, AdditiveExpr)

  FunctionSpecifier                       = functionnamed(Identifier);
                                            constructorfor(TypeSpecifier)

