/* ------------------------------------------------------------------------ */
/*                                                                          */
/* [firtree.abs]               Abstract Grammar                             */
/*                                                                          */
/* ------------------------------------------------------------------------ */

LANGUAGE firtree

TOKENS

  Identifier, IntConst, FloatConst

TYPES

  firtree                                 = Start_TranslationUnit(ExternalDeclaration*)

  ExternalDeclaration                     = functionprototype(FunctionHeader, ParameterDeclaration*);
                                            functiondefinition(ExternalDeclaration, OptionalElse*)

  FunctionHeader                          = functionheader(FunctionQualifier, FullySpecifiedType, Identifier)

  FunctionQualifier                       = kernel;
                                            function

  FullySpecifiedType                      = unqualifiedtype(TypeSpecifier);
                                            qualifiedtype(OptionalTypeQualifier, TypeSpecifier)

  TypeSpecifier                           = vec4;
                                            vec3;
                                            vec2;
                                            sampler;
                                            color;
                                            bool;
                                            void;
                                            int;
                                            float

  ParameterDeclaration                    = parameterdeclaration(OptionalTypeQualifier, OptionalParameterQualifier, TypeSpecifier, OptionalParameterIdentifier)

  OptionalTypeQualifier                   = defaulttypequalifier;
                                            const

  OptionalParameterQualifier              = in;
                                            defaultparameterqualifier;
                                            inout;
                                            out

  OptionalParameterIdentifier             = unnamedparameter;
                                            parametername(Identifier)

  SingleDeclaration                       = veariableinitializer(Identifier, AdditiveExpr)

  OptionalElse                            = newscope(AdditiveExpr);
                                            nop

  AssignmentOp                            = subassign;
                                            addassign;
                                            equal;
                                            mulassign;
                                            divassign

  AdditiveExpr                            = equal(AdditiveExpr, AdditiveExpr);
                                            noinitializer;
                                            inc(AdditiveExpr);
                                            dec(AdditiveExpr);
                                            selection(AdditiveExpr, OptionalElse, OptionalElse);
                                            sub(AdditiveExpr, AdditiveExpr);
                                            float(FloatConst);
                                            less(AdditiveExpr, AdditiveExpr);
                                            add(AdditiveExpr, AdditiveExpr);
                                            ternary(AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            initdeclaratorlist(FullySpecifiedType, SingleDeclaration, SingleDeclaration*);
                                            logicaland(AdditiveExpr, AdditiveExpr);
                                            negate(AdditiveExpr);
                                            newscope(OptionalElse*);
                                            assign(AdditiveExpr, AssignmentOp, AdditiveExpr);
                                            bool(BoolConst);
                                            logicalxor(AdditiveExpr, AdditiveExpr);
                                            return(AdditiveExpr);
                                            int(IntConst);
                                            variablenamed(Identifier);
                                            logicalor(AdditiveExpr, AdditiveExpr);
                                            nop;
                                            greaterequal(AdditiveExpr, AdditiveExpr);
                                            do(OptionalElse, AdditiveExpr);
                                            fieldselect(AdditiveExpr, Identifier);
                                            functioncall(FunctionSpecifier, AdditiveExpr*);
                                            lessequal(AdditiveExpr, AdditiveExpr);
                                            for(AdditiveExpr, AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            newsymbol(FullySpecifiedType, Identifier, AdditiveExpr);
                                            postdec(AdditiveExpr);
                                            expression(AdditiveExpr, AdditiveExpr*);
                                            greater(AdditiveExpr, AdditiveExpr);
                                            postinc(AdditiveExpr);
                                            notequal(AdditiveExpr, AdditiveExpr);
                                            while(AdditiveExpr, AdditiveExpr)

  FunctionSpecifier                       = functionnamed(Identifier);
                                            constructorfor(TypeSpecifier)

  BoolConst                               = true;
                                            false

