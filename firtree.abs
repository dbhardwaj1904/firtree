/* ------------------------------------------------------------------------ */
/*                                                                          */
/* [firtree.abs]               Abstract Grammar                             */
/*                                                                          */
/* ------------------------------------------------------------------------ */

LANGUAGE firtree

TOKENS

  Identifier, IntConst, FloatConst, BoolConst

TYPES

  firtree                                 = Start_TranslationUnit(ExternalDeclaration*)

  ExternalDeclaration                     = definefuntion(FunctionDefinition);
                                            declarefunction(FunctionPrototype)

  FunctionPrototype                       = functionprototype(FunctionQualifier, FullySpecifiedType, Identifier, ParameterDeclaration*)

  FunctionQualifier                       = kernel;
                                            function

  FullySpecifiedType                      = qualifiedtype(TypeQualifier, TypeSpecifier);
                                            unqualifiedtype(TypeSpecifier)

  TypeSpecifier                           = vec4;
                                            float;
                                            vec2;
                                            color;
                                            vec3;
                                            int;
                                            sampler;
                                            bool;
                                            void

  ParameterDeclaration                    = parameterdeclaration(OptionalTypeQualifier, OptionalParameterQualifier, TypeSpecifier, OptionalParameterIdentifier)

  TypeQualifier                           = const

  OptionalTypeQualifier                   = const;
                                            none

  OptionalParameterQualifier              = in;
                                            out;
                                            inout;
                                            none

  OptionalParameterIdentifier             = unnamedparameter;
                                            parametername(Identifier)

  FunctionDefinition                      = functiondefinition(FunctionPrototype, Expression*)

  SingleDeclaration                       = variableinitializer(Identifier, Expression)

  Expression                              = greater(Expression, Expression);
                                            subassign(Expression, Expression);
                                            add(Expression, Expression);
                                            div(Expression, Expression);
                                            fieldselect(Expression, Identifier);
                                            int(IntConst);
                                            variablenamed(Identifier);
                                            inc(Expression);
                                            bool(BoolConst);
                                            dec(Expression);
                                            mul(Expression, Expression);
                                            negate(Expression);
                                            return(Expression);
                                            nop;
                                            compound(Expression*);
                                            initdeclaratorlist(FullySpecifiedType, SingleDeclaration, SingleDeclaration*);
                                            postdec(Expression);
                                            logicaland(Expression, Expression);
                                            logicalor(Expression, Expression);
                                            while(Expression, Expression);
                                            equal(Expression, Expression);
                                            logicalxor(Expression, Expression);
                                            ternary(Expression, Expression, Expression);
                                            for(Expression, Expression, Expression, Expression);
                                            float(FloatConst);
                                            selection(Expression, Expression, Expression);
                                            less(Expression, Expression);
                                            addassign(Expression, Expression);
                                            postinc(Expression);
                                            lessequal(Expression, Expression);
                                            mulassign(Expression, Expression);
                                            assign(Expression, Expression);
                                            do(Expression, Expression);
                                            functioncall(FunctionSpecifier, Expression*);
                                            sub(Expression, Expression);
                                            notequal(Expression, Expression);
                                            greaterequal(Expression, Expression);
                                            divassign(Expression, Expression);
                                            expression(Expression, Expression*)

  FunctionSpecifier                       = functionnamed(Identifier);
                                            constructorfor(TypeSpecifier)

