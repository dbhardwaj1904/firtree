/* ------------------------------------------------------------------------ */
/*                                                                          */
/* [firtree.abs]               Abstract Grammar                             */
/*                                                                          */
/* ------------------------------------------------------------------------ */

LANGUAGE firtree

TOKENS

  Identifier, IntConst, FloatConst, BoolConst

TYPES

  firtree                                 = Start_TranslationUnit(ExternalDeclaration*)

  ExternalDeclaration                     = definefuntion(FunctionDefinition);
                                            declarefunction(FunctionPrototype)

  FunctionPrototype                       = functionprototype(FunctionQualifier, FullySpecifiedType, Identifier, ParameterDeclaration*)

  FunctionQualifier                       = kernel;
                                            function

  FullySpecifiedType                      = qualifiedtype(OptionalTypeQualifier, TypeSpecifier);
                                            unqualifiedtype(TypeSpecifier)

  TypeSpecifier                           = vec4;
                                            float;
                                            vec2;
                                            color;
                                            vec3;
                                            int;
                                            sampler;
                                            bool;
                                            void

  ParameterDeclaration                    = parameterdeclaration(OptionalTypeQualifier, OptionalParameterQualifier, TypeSpecifier, OptionalParameterIdentifier)

  OptionalTypeQualifier                   = notypequalifier;
                                            const

  OptionalParameterQualifier              = in;
                                            out;
                                            inout;
                                            noparameterqualifier

  OptionalParameterIdentifier             = parametername(Identifier);
                                            unnamedparameter

  FunctionDefinition                      = functiondefinition(FunctionPrototype, AdditiveExpr*)

  SingleDeclaration                       = variableinitializer(Identifier, AdditiveExpr)

  AdditiveExpr                            = less(AdditiveExpr, AdditiveExpr);
                                            nop;
                                            dec(AdditiveExpr);
                                            sub(AdditiveExpr, AdditiveExpr);
                                            float(FloatConst);
                                            inc(AdditiveExpr);
                                            greaterequal(AdditiveExpr, AdditiveExpr);
                                            logicalor(AdditiveExpr, AdditiveExpr);
                                            divassign(AdditiveExpr, AdditiveExpr);
                                            assign(AdditiveExpr, AdditiveExpr);
                                            ternary(AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            subassign(AdditiveExpr, AdditiveExpr);
                                            add(AdditiveExpr, AdditiveExpr);
                                            compound(AdditiveExpr*);
                                            initdeclaratorlist(FullySpecifiedType, SingleDeclaration, SingleDeclaration*);
                                            functioncall(FunctionSpecifier, AdditiveExpr*);
                                            lessequal(AdditiveExpr, AdditiveExpr);
                                            negate(AdditiveExpr);
                                            postinc(AdditiveExpr);
                                            mulassign(AdditiveExpr, AdditiveExpr);
                                            selection(AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            do(AdditiveExpr, AdditiveExpr);
                                            addassign(AdditiveExpr, AdditiveExpr);
                                            for(AdditiveExpr, AdditiveExpr, AdditiveExpr, AdditiveExpr);
                                            int(IntConst);
                                            variablenamed(Identifier);
                                            newsymbol(FullySpecifiedType, Identifier, AdditiveExpr);
                                            postdec(AdditiveExpr);
                                            expression(AdditiveExpr, AdditiveExpr*);
                                            logicaland(AdditiveExpr, AdditiveExpr);
                                            equal(AdditiveExpr, AdditiveExpr);
                                            return(AdditiveExpr);
                                            while(AdditiveExpr, AdditiveExpr);
                                            bool(BoolConst);
                                            fieldselect(AdditiveExpr, Identifier);
                                            greater(AdditiveExpr, AdditiveExpr);
                                            logicalxor(AdditiveExpr, AdditiveExpr);
                                            notequal(AdditiveExpr, AdditiveExpr)

  FunctionSpecifier                       = constructorfor(TypeSpecifier);
                                            functionnamed(Identifier)

