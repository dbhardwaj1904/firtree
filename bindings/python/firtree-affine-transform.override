%%
override firtree_affine_transform_transform_point kwargs
static PyObject* 
_wrap_firtree_affine_transform_transform_point(PyGObject* self, PyObject *args, PyObject* kwargs)
{
    static char *kwlist[] = { "x", "y", NULL };
    float x, y;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "ff:FirtreeAffineTransform.transform_point", kwlist, 
                &x, &y))
        return NULL;

    FirtreeVec2 result = firtree_affine_transform_transform_point(
            FIRTREE_AFFINE_TRANSFORM(self->obj), x, y);

    GValue result_val = {0,};
    g_value_init(&result_val, FIRTREE_TYPE_VEC2);
    g_value_set_boxed(&result_val, &result);
    PyObject* rv = _from_vec2(&result_val);
    g_value_unset(&result_val);

    return rv;
}
%%
override firtree_affine_transform_transform_size kwargs
static PyObject* 
_wrap_firtree_affine_transform_transform_size(PyGObject* self, PyObject *args,  PyObject* kwargs)
{
    static char *kwlist[] = { "width", "height", NULL };
    float w, h;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "ff:FirtreeAffineTransform.transform_size", kwlist, 
                &w, &h))
        return NULL;

    FirtreeVec2 result = firtree_affine_transform_transform_size(
            FIRTREE_AFFINE_TRANSFORM(self->obj), w, h);

    GValue result_val = {0,};
    g_value_init(&result_val, FIRTREE_TYPE_VEC2);
    g_value_set_boxed(&result_val, &result);
    PyObject* rv = _from_vec2(&result_val);
    g_value_unset(&result_val);

    return rv;
}
%%
// vim:sw=4:ts=4:cindent:et:filetype=c

