%%
override firtree_sampler_get_extent 
static PyObject* 
_wrap_firtree_sampler_get_extent(PyGObject* self, PyObject *args)
{
    /* We expect no parameters */
    if(!PyArg_ParseTuple(args, ":Sampler.get_extent"))
    {
        return NULL;
    }

    FirtreeVec4 extent = firtree_sampler_get_extent(
            FIRTREE_SAMPLER(self->obj));
    GValue extent_val = {0,};
    g_value_init(&extent_val, FIRTREE_TYPE_VEC4);
    g_value_set_boxed(&extent_val, &extent);
    PyObject* rv = _from_vec4(&extent_val);
    g_value_unset(&extent_val);

    return rv;
}
%%
override firtree_sampler_get_transform
static PyObject *
_wrap_firtree_sampler_get_transform(PyGObject *self)
{
    FirtreeAffineTransform *ret;
    
    /* This needs to be overridden to ensure the returned
     * transform is unref-ed after passing it to pygobject_new. */

    ret = firtree_sampler_get_transform(FIRTREE_SAMPLER(self->obj));
    
    /* pygobject_new handles NULL checking */
    PyObject* new_obj = pygobject_new((GObject *)ret);

    if(ret) {
        g_object_unref(ret);
    }

    return new_obj;
}
%%
// vim:sw=4:ts=4:cindent:et:filetype=c

