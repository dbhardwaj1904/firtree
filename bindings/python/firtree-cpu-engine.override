%%
override firtree_cpu_renderer_set_sampler kwargs
static PyObject *
_wrap_firtree_cpu_renderer_set_sampler(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "sampler", NULL };
    PyGObject *sampler;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "O:FirtreeCpuRenderer.set_sampler", kwlist,
                &sampler))
        return NULL;

    /* Check input is None or a sampler. */
    if((PyObject*)sampler == Py_None) {
        firtree_cpu_renderer_set_sampler(FIRTREE_CPU_RENDERER(self->obj), NULL);
        Py_INCREF(Py_None);
        return Py_None;
    }

    if(!PyObject_TypeCheck((PyObject*)sampler, &PyFirtreeSampler_Type)) {
        PyErr_SetString(PyExc_TypeError,
                "Argument 1 must be a pyfirtree.Sampler or None.");
        return NULL;
    }

    firtree_cpu_renderer_set_sampler(FIRTREE_CPU_RENDERER(self->obj), 
            FIRTREE_SAMPLER(sampler->obj));
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override firtree_cpu_renderer_render_into_pixbuf
static PyObject *
_wrap_firtree_cpu_renderer_render_into_pixbuf(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "extents", "pixbuf", NULL };
    PyGObject *pixbuf;
    float extents[4];
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "(ffff)O!:FirtreeCpuRenderer.render_into_pixbuf", kwlist,
                &extents[0], &extents[1], &extents[2], &extents[3],
                &PyGdkPixbuf_Type, &pixbuf))
        return NULL;
    
    ret = firtree_cpu_renderer_render_into_pixbuf(FIRTREE_CPU_RENDERER(self->obj), 
            (FirtreeVec4*)extents, GDK_PIXBUF(pixbuf->obj));
    
    return PyBool_FromLong(ret);

}
%%
override firtree_cpu_renderer_render_into_cairo_surface
static PyObject *
_wrap_firtree_cpu_renderer_render_into_cairo_surface(PyGObject *self,
        PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "extents", "surface", NULL };
    PycairoSurface* cairo_surface;
    float extents[4];
    int ret;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "(ffff)O!:FirtreeCpuRenderer.render_into_cairo_surface", kwlist,
                &extents[0], &extents[1], &extents[2], &extents[3],
                &PycairoSurface_Type, &cairo_surface))
        return NULL;
    
    Py_BEGIN_ALLOW_THREADS
    ret = firtree_cpu_renderer_render_into_cairo_surface(
            FIRTREE_CPU_RENDERER(self->obj), 
            (FirtreeVec4*)extents, cairo_surface->surface);
    Py_END_ALLOW_THREADS
    
    return PyBool_FromLong(ret);
}
%%
override firtree_cpu_renderer_render_into_buffer
static PyObject *
_wrap_firtree_cpu_renderer_render_into_buffer(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "extents", "buffer", "width", "height", "stride", "format", NULL };

    float extents[4];
    int ret;
    char* buffer = NULL;
    int buffer_len = 0;
    unsigned long width, height, stride;
    PyObject *format;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "(ffff)z#kkkO!:FirtreeCpuRenderer.render_into_buffer", kwlist,
                &extents[0], &extents[1], &extents[2], &extents[3],
                &buffer, &buffer_len, &width, &height, &stride, 
                &PyGEnum_Type, &format))
        return NULL;

    if((buffer == NULL) || (buffer_len == 0)) {
        firtree_buffer_sampler_set_buffer(FIRTREE_BUFFER_SAMPLER(self->obj),
                NULL, 0, 0, 0, FIRTREE_FORMAT_LAST);

        Py_INCREF(Py_None);
        return Py_None;
    }

    gint format_val;
    if(0 != pyg_enum_get_value(FIRTREE_TYPE_BUFFER_FORMAT, format, &format_val)) {
        return NULL;
    }
 
    Py_BEGIN_ALLOW_THREADS
    ret = firtree_cpu_renderer_render_into_buffer(
            FIRTREE_CPU_RENDERER(self->obj), 
            (FirtreeVec4*)extents,
            buffer, width, height, stride, (FirtreeBufferFormat)format_val);
    Py_END_ALLOW_THREADS
    
    return PyBool_FromLong(ret);
}
%%
override firtree_cpu_reduce_engine_run
static PyObject *
_wrap_firtree_cpu_reduce_engine_run(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "extents", "width", "height", NULL };

    float extents[4];
    unsigned long width, height;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "(ffff)kk:FirtreeCpuReduceEngine.run", kwlist,
                &extents[0], &extents[1], &extents[2], &extents[3],
                &width, &height))
        return NULL;

    FirtreeLockFreeSet* output = firtree_lock_free_set_new(sizeof(FirtreeVec4));

    Py_BEGIN_ALLOW_THREADS
    firtree_cpu_reduce_engine_run(
            FIRTREE_CPU_REDUCE_ENGINE(self->obj), 
            output, (FirtreeVec4*)extents,
            width, height);
    Py_END_ALLOW_THREADS

    gint element_count = 
            firtree_lock_free_set_get_element_count(output);
    PyObject* output_tuple = PyTuple_New(element_count);

    Py_ssize_t element_idx = 0;
    FirtreeVec4* element = (FirtreeVec4*) firtree_lock_free_set_get_first_element(output);
    while(element) {
        g_assert(element_idx < element_count);
        PyTuple_SET_ITEM(output_tuple, element_idx, 
                Py_BuildValue("(ffff)",
                    element->x, element->y, element->z, element->w));
        ++element_idx;
        element = (FirtreeVec4*) firtree_lock_free_set_get_next_element(output, element);
    }
    g_assert(element_idx == element_count);
    firtree_lock_free_set_free(output);
    
    return output_tuple;
}
%%
// vim:sw=4:ts=4:cindent:et:filetype=c

