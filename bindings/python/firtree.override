%%
headers
#include <Python.h>
#include <pyglib.h> 
#include <pygobject.h> 

#include <firtree/firtree.h>

static PyObject* 
_wrap_firtree_kernel_mp_subscript(PyObject *self, PyObject *arg_obj);

static int
_wrap_firtree_kernel_mp_ass_subscript(PyObject *self, PyObject *arg_obj, PyObject *value);
%%
init

%%
modulename pyfirtree
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
  *_get_type                            
  _*
  *_ref
  *_unref
%%
override firtree_kernel_compile_from_source kwargs
static PyObject*
_wrap_firtree_kernel_compile_from_source(PyGObject* self, PyObject *args, PyObject *kwargs) 
{
    static char *kwlist[] = { "lines", "kernel_name" };

    PyObject* lines = NULL;
    char* kernel_name = NULL;

    if(!PyArg_ParseTupleAndKeywords(args, kwargs,
                "O|s:Kernel.compile_from_source", kwlist,
                &lines, &kernel_name))
    {
        return NULL;
    }

    /* lines may be a sequence, in which case the string
     * value of it's items is used or a non-sequence and the 
     * string value is used directly. */
    gboolean rv = FALSE;
    if(PyString_Check(lines)) {
        /* it is a string. */
        gchar* str = PyString_AS_STRING(lines);
        rv = firtree_kernel_compile_from_source(FIRTREE_KERNEL(self->obj), 
                &str, 1, kernel_name);
    } else if(PySequence_Check(lines)) {
        /* it is a sequence */
        guint i = 0;
        guint n_items = PySequence_Length(lines);
        GArray* str_array = g_array_sized_new(FALSE, FALSE,
                sizeof(gchar*), n_items);
        gboolean all_are_strings = TRUE;

        for(i=0; i<n_items; ++i)
        {
            PyObject* item = PySequence_ITEM(lines, i);
            gchar* str_val = NULL;
            if(PyString_Check(item)) {
                str_val = PyString_AS_STRING(item);
            } else {
                all_are_strings = FALSE;
            }
            g_array_append_val(str_array, str_val);
            Py_DECREF(item);
        }

        if(all_are_strings) {
            rv = firtree_kernel_compile_from_source(FIRTREE_KERNEL(self->obj), 
                    (gchar**)(str_array->data), str_array->len, kernel_name);
            g_array_free(str_array, TRUE);
        } else {
            g_array_free(str_array, TRUE);

            PyErr_SetString(PyExc_TypeError, "Sequence elements must all be strings.");
            return NULL;
        }

    } else {
        PyErr_SetString(PyExc_TypeError, "Expected a string or sequence of strings.");
        return NULL;
    }

    return PyBool_FromLong((long)rv);
}
%%
override firtree_kernel_get_compile_log kwargs
static PyObject*
_wrap_firtree_kernel_get_compile_log(PyGObject* self, PyObject *args)
{
    /* We expect no parameters */
    if(!PyArg_ParseTuple(args, ":Kernel.get_compile_log"))
    {
        return NULL;
    }

    guint n_log_lines = 0;
    gchar** compile_log = 
        firtree_kernel_get_compile_log(FIRTREE_KERNEL(self->obj), &n_log_lines);

    if(NULL == compile_log) {
        Py_INCREF(Py_None);
        return Py_None;
    }

    PyObject* log_tuple = PyTuple_New(n_log_lines);
    if(NULL == log_tuple) {
        return NULL;
    }

    guint i;
    for(i = 0; i<n_log_lines; ++i) {
        PyObject* new_str = PyString_FromString(compile_log[i]);
        PyTuple_SET_ITEM(log_tuple, i, new_str);
    }

    return log_tuple;
}
%%
override firtree_kernel_argument_changed kwargs
static PyObject *
_wrap_firtree_kernel_argument_changed(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "arg_name", NULL };
    char *arg_name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"s:FirtreeKernel.argument_changed", kwlist, &arg_name))
        return NULL;
    
    firtree_kernel_argument_changed(FIRTREE_KERNEL(self->obj),
            g_quark_from_string(arg_name));
    
    Py_INCREF(Py_None);
    return Py_None;
}
%%
override firtree_kernel_get_argument_value kwargs
static PyObject *
_wrap_firtree_kernel_get_argument_value(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "arg_name", NULL };
    PyObject* arg_obj;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,"O!:FirtreeKernel.get_argument_value", kwlist,
                &PyString_Type, &arg_obj))
        return NULL;

    return _wrap_firtree_kernel_mp_subscript((PyObject*)self, arg_obj);
}
%%
override firtree_kernel_set_argument_value kwargs
static PyObject *
_wrap_firtree_kernel_set_argument_value(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "arg_name", "value", NULL };
    PyObject* arg_obj;
    PyObject* value;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "O!O:FirtreeKernel.set_argument_value", kwlist,
                 &PyString_Type, &arg_obj, &value))
        return NULL;

    if(_wrap_firtree_kernel_mp_ass_subscript((PyObject*)self, arg_obj, value)) {
        return NULL;
    }

    Py_INCREF(Py_None);
    return Py_None;
}
%%
override firtree_kernel_get_argument_spec kwargs
static PyObject *
_wrap_firtree_kernel_get_argument_spec(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "arg_name", NULL };
    char *arg_name;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                "s:FirtreeKernel.get_argument_spec", kwlist,
                &arg_name))
        return NULL;
    
    GQuark arg_quark = g_quark_from_string(arg_name);

    FirtreeKernelArgumentSpec* spec = firtree_kernel_get_argument_spec(
            FIRTREE_KERNEL(self->obj), arg_quark);

    /* If no spec, throw a key error */
    if(NULL == spec) {
        PyObject* err_str = PyString_FromFormat("No such argument: %s.", arg_name);
        PyErr_SetObject(PyExc_KeyError, err_str);
        Py_DECREF(err_str);
        return NULL;
    }

    /* Create a tuple to hold spec. */
    PyObject* spec_tuple = PyTuple_New(3);
    PyTuple_SET_ITEM(spec_tuple, 0, PyString_FromString(arg_name));
    PyTuple_SET_ITEM(spec_tuple, 1, pyg_type_wrapper_new(spec->type));
    PyTuple_SET_ITEM(spec_tuple, 2, PyBool_FromLong((long)spec->is_static));

    return spec_tuple;
}
%%
override firtree_kernel_list_arguments kwargs
static PyObject *
_wrap_firtree_kernel_list_arguments(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { NULL };

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                ":FirtreeKernel.list_arguments", kwlist))
        return NULL;

    guint n_args = 0;
    GQuark* arg_list = firtree_kernel_list_arguments(
            FIRTREE_KERNEL(self->obj), &n_args);

    if(NULL == arg_list) {
        Py_INCREF(Py_None);
        return Py_None;
    }
    
    /* Create a tuple to hold result. */
    PyObject* arg_tuple = PyTuple_New(n_args);
    guint i;
    for(i=0; i<n_args; ++i) {
        PyTuple_SET_ITEM(arg_tuple, i, PyString_FromString(g_quark_to_string(arg_list[i])));
    }

    return arg_tuple;
}
%%
override-slot FirtreeKernel.tp_as_mapping
static Py_ssize_t
_wrap_firtree_kernel_mp_length(PyGObject *self)
{
    guint n_args = 0;
    firtree_kernel_list_arguments(FIRTREE_KERNEL(self->obj), &n_args);
    return n_args;
}

static PyObject* 
_wrap_firtree_kernel_mp_subscript(PyObject *self, PyObject *arg_obj)
{
    gchar* arg_name = PyString_AsString(arg_obj);
    if(NULL == arg_name) {
        return NULL;
    }

    FirtreeKernel* kernel = FIRTREE_KERNEL(((PyGObject*)self)->obj);
    GQuark arg_quark = g_quark_from_string(arg_name);
    FirtreeKernelArgumentSpec* spec = firtree_kernel_get_argument_spec(kernel, arg_quark);

    /* If no spec, throw a key error */
    if(NULL == spec) {
        PyObject* err_str = PyString_FromFormat("No such argument: %s.", arg_name);
        PyErr_SetObject(PyExc_KeyError, err_str);
        Py_DECREF(err_str);
        return NULL;
    }

    GValue* arg_value = firtree_kernel_get_argument_value(kernel, arg_quark);
    if(NULL == arg_value)
    {
        Py_INCREF(Py_None);
        return Py_None;
    }

    return pyg_value_as_pyobject(arg_value, TRUE);
}

static int
_wrap_firtree_kernel_mp_ass_subscript(PyObject *self, PyObject *arg_obj, PyObject *value)
{
    gchar* arg_name = PyString_AsString(arg_obj);
    if(NULL == arg_name) {
        return -1;
    }

    FirtreeKernel* kernel = FIRTREE_KERNEL(((PyGObject*)self)->obj);
    GQuark arg_quark = g_quark_from_string(arg_name);
    FirtreeKernelArgumentSpec* spec = firtree_kernel_get_argument_spec(kernel, arg_quark);

    /* If no spec, throw a key error */
    if(NULL == spec) {
        PyObject* err_str = PyString_FromFormat("No such argument: %s.", arg_name);
        PyErr_SetObject(PyExc_KeyError, err_str);
        Py_DECREF(err_str);
        return -1;
    }

    /* if the value is none, unset the argument. */
    gboolean rv = FALSE;
    if(value == Py_None) {
        rv = firtree_kernel_set_argument_value(kernel, arg_quark, NULL);
    } else {
        GValue arg_value = {0,};
        g_value_init(&arg_value, spec->type);
        if(pyg_value_from_pyobject(&arg_value, value)) {
            PyObject* err_str = PyString_FromFormat(
                    "Argument %s is expected to be of type %s.",
                    arg_name,
                    g_type_name(spec->type));
            PyErr_SetObject(PyExc_TypeError, err_str);
            Py_DECREF(err_str);
            return -1;
        }
        rv = firtree_kernel_set_argument_value(kernel, arg_quark, &arg_value);
        g_value_unset(&arg_value);
    }

    if(!rv) {
        PyErr_SetString(PyExc_ValueError, "Could not set argument value.");
        return -1;
    }

    return 0;
}

static PyMappingMethods _wrap_firtree_kernel_tp_as_mapping = {
    (lenfunc)_wrap_firtree_kernel_mp_length,
    (binaryfunc)_wrap_firtree_kernel_mp_subscript,
    (objobjargproc)_wrap_firtree_kernel_mp_ass_subscript,
};
%%
// vim:sw=4:ts=4:cindent:et:filetype=c

