%%
headers
#include <Python.h>
#include <pyglib.h> 
#include <pygobject.h> 

#include <firtree/firtree.h>

#if FIRTREE_HAVE_CAIRO
#   include <pycairo/pycairo.h>
    static Pycairo_CAPI_t *Pycairo_CAPI;
#endif /* FIRTREE_HAVE_CAIRO */

static PyObject* 
_wrap_firtree_kernel_mp_subscript(PyObject *self, PyObject *arg_obj);

static int
_wrap_firtree_kernel_mp_ass_subscript(PyObject *self, PyObject *arg_obj, PyObject *value);

#define VEC_CONVERSION(dimension) \
PyObject* _from_vec##dimension(const GValue *value) \
{ \
    if(G_VALUE_TYPE(value) != FIRTREE_TYPE_VEC##dimension) { \
        PyErr_SetString(PyExc_TypeError, "Expected FirtreeVec" #dimension " type."); \
        return NULL; \
    } \
 \
    FirtreeVec##dimension* vec = (FirtreeVec##dimension*)g_value_get_boxed(value); \
 \
    PyObject* vec_tuple = PyTuple_New(dimension); \
    if(NULL == vec_tuple) { \
        return NULL; \
    } \
    float* fvec = (float*)vec; \
    int i=0; \
    for(i=0; i<dimension; ++i) { \
        PyTuple_SET_ITEM(vec_tuple, i, PyFloat_FromDouble(fvec[i]));  \
    } \
 \
    return vec_tuple; \
} \
 \
int _to_vec##dimension(GValue *value, PyObject* obj) \
{ \
    if(G_VALUE_TYPE(value) != FIRTREE_TYPE_VEC##dimension) { \
        PyErr_SetString(PyExc_TypeError, "Expected FirtreeVec" #dimension " type."); \
        return -1; \
    } \
 \
    if(!PySequence_Check(obj)) { \
        PyErr_SetString(PyExc_TypeError, "Expected sequence type."); \
        return -1; \
    } \
 \
    if(PySequence_Length(obj) != dimension) { \
        PyErr_SetString(PyExc_TypeError, "Expected sequence type of length " #dimension "."); \
        return -1; \
    } \
 \
    float vals[dimension]; \
    int i=0; \
    for(i=0; i<dimension; ++i) \
    { \
        PyObject* item = PySequence_ITEM(obj, i); \
         \
        if(!PyFloat_Check(item)) { \
            /* Attempt to convert to a float. */ \
            PyObject* orig_item = item; \
            item = PyNumber_Float(orig_item); \
            Py_DECREF(orig_item); \
        } \
 \
        if(NULL == item) { \
            PyErr_SetString(PyExc_TypeError, \
                    "Sequence items must be floating point."); \
            return -1; \
        }  \
 \
        vals[i] = PyFloat_AsDouble(item); \
        Py_DECREF(item); \
    } \
 \
    g_value_set_boxed(value, vals); \
 \
    return 0; \
} 

VEC_CONVERSION(2)
VEC_CONVERSION(3)
VEC_CONVERSION(4)

%%
init

#if FIRTREE_HAVE_CAIRO
    Pycairo_IMPORT;
#endif /* FIRTREE_HAVE_CAIRO */

/* Register boxed types */
pyg_register_gtype_custom(FIRTREE_TYPE_VEC2, _from_vec2, _to_vec2);
pyg_register_gtype_custom(FIRTREE_TYPE_VEC3, _from_vec3, _to_vec3);
pyg_register_gtype_custom(FIRTREE_TYPE_VEC4, _from_vec4, _to_vec4);
%%
modulename pyfirtree
%%
import gobject.GObject as PyGObject_Type
import gtk.gdk.Pixbuf as PyGdkPixbuf_Type
import clutter.Texture as PyClutterTexture_Type
%%
ignore-glob
  *_get_type                            
  _*
  *_ref
  *_unref
%%
include
    firtree-affine-transform.override
    firtree-cogl-texture-sampler.override
    firtree-cairo-surface-sampler.override
    firtree-cpu-engine.override
    firtree-debug.override
    firtree-kernel.override
    firtree-kernel-sampler.override
    firtree-pixbuf-sampler.override
    firtree-sampler.override
%%
// vim:sw=4:ts=4:cindent:et:filetype=c

